'use strict';

var path = require('path');
var FileWriter = require('../build-tools/file-writer');
var config = require('../src/config/variables');

var nginxConf = [`###
### WARNING: This file is generated by ' + path.basename(__filename) + ' - do not edit manually!
###
user nginx;
worker_processes 1;

pid /var/run/nginx.pid;

events {
  worker_connections 1024;
}

http {
  include mime.types;
  default_type application/octet-stream;
  sendfile on;

  # backend node processes
  upstream nodes {
    server 127.0.0.1:8000;
    keepalive 64;
  }

  server {
    listen 80;
    listen [::]:80;
    listen 443 ssl;

    server_name localhost;

    access_log /logs/site-access-nginx.log;
    error_log /logs/site-error-nginx.log;

    # if ($scheme = http) {
    #   return 301 https://$server_name$request_uri;
    # }

    access_log /logs/site-access-nginx.log;
    error_log /logs/site-error-nginx.log;

    # handle static assets and enable compression and caching
    location ~ \.(mp3|mp4|webm|png|jpg|svg|jpeg|ttf|woff|woff2|eot|js|css|min.js|min.css|txt|xml) {
      root ${path.join(__dirname, '../public')};
      gzip on;
      gzip_disable msie6;
      gzip_vary on;
      gzip_proxied any;
      gzip_comp_level 6;
      gzip_buffers 16 8k;
      gzip_http_version 1.1;
      gzip_min_length 256;
      gzip_types text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;
      expires max;
      add_header Cache-Control public;
    }

    # everything else goes to backend node app processes
    location / {
      proxy_pass http://nodes;
      proxy_redirect off;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $host;
      proxy_set_header X-NginX-Proxy true;
      proxy_set_header Connection '';
      proxy_http_version 1.1;
      # enable authorization header for tokens and enable CORS
      # proxy_set_header Access-Control-Allow-Headers: authorization;
      # proxy_set_header Access-Control-Allow-Methods: GET,HEAD,PUT,PATCH,POST,DELETE;
      # proxy_set_header Access-Control-Allow-Origin: *;
    }
  }
}`];

module.exports = function () {
	FileWriter.write('nginx.conf', nginxConf.join('\n'));
};
